version: '3'

services:
  rethinkdb:
    image: rethinkdb:2.3.6
    container_name: rethinkdb
    networks: 
      - "traefik"
    ports:
      - "28015:28015"
      - "8088:8080"
    volumes:
      - ./server/rethinkdb:/data
    networks:
      - traefik
    labels:
      - traefik.http.services.rethinkdb-backend.loadbalancer.server.port=8088
      - traefik.http.routers.rethinkdb.service=rethinkdb-backend
      - "traefik.http.routers.rethinkdb.rule=PathPrefix(`/rethinkdb`)"
      # - traefik.http.routers.rethinkdb.middlewares=errorhandler@docker
      - traefik.http.routers.rethinkdb.middlewares=rethinkdb-chain
      - traefik.http.middlewares.rethinkdb-chain.chain.middlewares=errorhandler,rethinkdb-replacepathregex
      # Replace path with regex
      - "traefik.http.middlewares.rethinkdb-replacepathregex.replacepathregex.regex=/rethinkdb(/*)"
      - "traefik.http.middlewares.rethinkdb-replacepathregex.replacepathregex.replacement=$$1"

  horizon:
    image: rethinkdb/horizon
    container_name: horizon
    command: su -s /bin/sh horizon -c "hz serve --dev --connect rethinkdb://rethinkdb:28015 --bind all /usr/app"
    networks: 
      - "traefik"
    volumes:
      - ./client:/usr/app
    ports:
      - "8181:8181"
    depends_on:
      - rethinkdb
    networks:
      - traefik
    labels:
      - traefik.http.services.horizon-backend.loadbalancer.server.port=8181
      - traefik.http.routers.horizon.service=horizon-backend
      - "traefik.http.routers.horizon.rule=PathPrefix(`/horizon`)"
      - traefik.http.routers.horizon.middlewares=errorhandler@docker


  django:
    build: ./server/
    container_name: django
    command: bash -c "python3 manage.py migrate && python3 manage.py runserver 0.0.0.0:8000"
    volumes:
      # So that Django can interact with Docker host
      - /var/run/docker.sock:/var/run/docker.sock
      - ./server:/code
    ports:
      - "8000:8000"
    environment:
      - RDB_HOST=rethinkdb
      - RDB_PORT=28015
    depends_on:
      - horizon
    networks:
      - traefik

    labels:
      - traefik.http.services.errorhandler-backend.loadbalancer.server.port=8000
      - traefik.http.routers.errorhandler.service=errorhandler-backend
      - "traefik.http.routers.errorhandler.rule=PathPrefix(`/graphql/`)"


  react:
    build:
      context: ./client/
      args:
        #SET THIS ARGUMENT TO REFLECT THE EXPOSED IP/HOSTNAME (1.1.1.1, example.com, localhost)

        - hosted_at=localhost
    container_name: react
    command: bash -c "cd /code && yarn install && yarn start"
    volumes:
      - ./client:/code
    ports:
      - "3000:3000"
    depends_on:
      - django
    networks:
      - traefik
    labels:
      - traefik.http.services.react-backend.loadbalancer.server.port=3000
      - traefik.http.routers.react.service=react-backend
      - traefik.http.routers.react.rule= PathPrefix(`/scoreboard`) || PathPrefix(`/challenges`) || PathPrefix(`/admin`) || PathPrefix(`/team`) || PathPrefix(`/register`) || PathPrefix(`/posts`) || PathPrefix(`/instructions`) ||PathPrefix(`/login`) #|| PathPrefix(`/`) # don't add this back in I'm not sure why but it breaks routing for the dashboard. 
      - traefik.http.routers.react.middlewares=errorhandler@docker
      # this seperate rule for the default route is necessary for dashboard to work - not sure why. 
      - traefik.http.routers.default2.rule=PathPrefix(`/`)
      - traefik.http.routers.default2.middlewares=errorhandler@docker


  reverse-proxy:
      # The official v2.0 Traefik docker image
      image: traefik:v2.0.6
      # Enables the web UI and tells Traefik to listen to docker
      command: --providers.docker --accesslog=true  --api.insecure=true --api.dashboard=true
      ports:
        # The HTTP port
        - "80:80"
        # The Web UI (enabled by --api.insecure=true)
        - "8080:8080"
      volumes:
        # So that Traefik can listen to the Docker events
        - /var/run/docker.sock:/var/run/docker.sock
      labels:
        # error handling definition:
        - traefik.http.middlewares.errorhandler.errors.status=404
        - traefik.http.middlewares.errorhandler.errors.service=errorhandler-backend
        - traefik.http.middlewares.errorhandler.errors.query=/graphql/
        - traefik.http.routers.api.rule=PathPrefix(`/api`) || PathPrefix(`/dashboard`)
        - "traefik.http.routers.api.service=api@internal"
        - traefik.http.routers.api.middlewares=errorhandler@docker
        # - traefik.http.routers.api.middlewares=reverse-proxy-chain
        # - traefik.http.midlewares.reverse-proxy-chain.chain.middlewares=errorhandler

       
      depends_on:
        - django
      networks:
        - traefik

  goodpath:
    image: apache
    build: .
    container_name: apache_goodpath
    ports:
      - "9880:80"
    labels:
      - "traefik.http.routers.goodpath.rule=Host(`traefik.ruehouse.com`)"
      - "traefik.http.routers.goodpath.rule=PathPrefix(`/goodpath`) || PathPrefix(`/path`)"
      # - traefik.http.routers.goodpath.middlewares=errorhandler@docker
      - traefik.http.services.goodpath.loadbalancer.server.port=80
      - traefik.http.routers.goodpath.middlewares=goodpath-chain
      - traefik.http.middlewares.goodpath-chain.chain.middlewares=errorhandler,goodpath-replacepathregex #,middleware199
      # Replace path with regex
      - "traefik.http.middlewares.goodpath-replacepathregex.replacepathregex.regex=/(goodpath)/a"
      - "traefik.http.middlewares.goodpath-replacepathregex.replacepathregex.replacement=/$$1/"
      # - "traefik.http.middlewares.middleware199.stripprefix.prefixes=/path, foobar"

    networks:
      - traefik

  pathStrip:
    image: apache
    build: 
      context: .
      dockerfile: dockerfile2
    container_name: apache_pathStrip
    labels:
      - "traefik.http.routers.pathStrip.rule=PathPrefix(`/path`)"
      - traefik.http.services.pathStrip.loadbalancer.server.port=80
      - traefik.http.routers.pathStrip.middlewares=pathStrip-chain
      # - traefik.http.routers.pathStrip.middlewares=pathStrip-chain
      - traefik.http.middlewares.pathStrip-chain.chain.middlewares=errorhandler, middleware19 #pathStrip-stripprefix

      # - "traefik.http.middlewares.pathStrip-stripprefix.stripprefix.prefixes=/path"
      # - "traefik.http.middlewares.pathStrip-stripprefix.stripprefix.forceslash=true"
      - "traefik.http.middlewares.middleware19.stripprefix.forceslash=true"
      - "traefik.http.middlewares.middleware19.stripprefix.prefixes=/path, foobar"
    networks:
      - traefik

  # whoami:
  #   image: tutum/hello-world:latest
  #   container_name: hello-world
  #   labels:
  #     - "traefik.http.routers.hello-world.rule=Host(`traefik.ruehouse.com`)"
  #     - "traefik.http.routers.hello-world.rule=PathPrefix(`/hello`)"
  #     # - traefik.http.routers.goodpath.middlewares=errorhandler@docker
  #     - traefik.http.services.hello-world.loadbalancer.server.port=80
  #     - traefik.http.routers.hello-world.middlewares=hello-world-chain
  #     - traefik.http.middlewares.hello-world-chain.chain.middlewares=errorhandler,hello-world-replacepathregex,hello-world-stripprefix
  #     # Replace path with regex
  #     - "traefik.http.middlewares.hello-world-replacepathregex.replacepathregex.regex=/(hello)/a"
  #     - "traefik.http.middlewares.hello-world-replacepathregex.replacepathregex.replacement=/$$1/"
  #     - "traefik.http.middlewares.hello-world-stripprefix.stripprefix.prefixes=/foobar"
  #     - "traefik.http.middlewares.hello-world-stripprefix.stripprefix.forceslash=false"
  #   networks:
  #     - traefik

networks:
  traefik:
        
